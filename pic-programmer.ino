#include <avr/pgmspace.h>

#define CLK_OUT 4
#define DAT_OUT 7
#define DAT_IN 3
#define VDD_OUT 2
#define VPP_OUT A1
#define PGM_OUT 5
#define STATUS_LED 13

#define VPP_ON 0
#define VPP_OFF 1

#define CMD_LOAD_CONFIG         0x00    // Load (write) to config memory
#define CMD_LOAD_PROGRAM_MEMORY 0x02    // Load to program memory
#define CMD_LOAD_DATA_MEMORY    0x03    // Load to data memory
#define CMD_INCREMENT_ADDRESS   0x06    // Increment the PC
#define CMD_READ_PROGRAM_MEMORY 0x04    // Read from program memory
#define CMD_READ_DATA_MEMORY    0x05    // Read from data memory
#define CMD_BEGIN_PROGRAM       0x08    // Begin programming with erase cycle
#define CMD_BULK_ERASE_PROGRAM  0x09    // Bulk erase program memory
#define CMD_BULK_ERASE_DATA     0x0B    // Bulk erase data memory

#define T_PROG_MS 4
#define T_DPROG_MS 6
#define T_ERA_MS 6

const uint16_t program_segment[] PROGMEM = { 0x0064, 0x1727, 0x17a7, 0x2107, 0x1386, 0x1683, 0x306f, 0x0086, 0x1283, 0x2093, 0x0806, 0x00f4,
                               0x1683, 0x3040, 0x0086, 0x1283, 0x20e9, 0x2243, 0x20fd, 0x302d, 0x2088, 0x2114, 0x2099, 0x2114,
                               0x083e, 0x00b6, 0x083f, 0x00b7, 0x0840, 0x00b8, 0x0841, 0x00b9, 0x1786, 0x2099, 0x2114, 0x2099,
                               0x2114, 0x083e, 0x00ba, 0x083f, 0x00bb, 0x0840, 0x00bc, 0x0841, 0x00bd, 0x1386, 0x2099, 0x2114,
                               0x1683, 0x306f, 0x0086, 0x1283, 0x2093, 0x0806, 0x00f3, 0x1683, 0x3040, 0x0086, 0x1283, 0x1c73,
                               0x2849, 0x1cf3, 0x2850, 0x1d73, 0x285a, 0x1df3, 0x2859, 0x1386, 0x1c4a, 0x2865, 0x104a, 0x2253,
                               0x2865, 0x144a, 0x300a, 0x07f1, 0x1c03, 0x2865, 0x0af0, 0x2865, 0x144a, 0x30f6, 0x07f1, 0x1c03,
                               0x2856, 0x0af0, 0x30ff, 0x07f0, 0x2865, 0x1786, 0x20fd, 0x2114, 0x20fb, 0x083f, 0x00a4, 0x0840,
                               0x00a3, 0x0841, 0x00a2, 0x214f, 0x2830, 0x20fd, 0x2099, 0x2114, 0x083e, 0x043f, 0x0440, 0x1d03,
                               0x2870, 0x3000, 0x2088, 0x2830, 0x01c8, 0x2213, 0x2211, 0x1f06, 0x287d, 0x21f8, 0x08c8, 0x1d03,
                               0x2885, 0x3021, 0x2088, 0x2158, 0x2830, 0x21fc, 0x08c8, 0x1d03, 0x2885, 0x3027, 0x2088, 0x218d,
                               0x2830, 0x3000, 0x2088, 0x2830, 0x1683, 0x009b, 0x141c, 0x081a, 0x1283, 0x1903, 0x0008, 0x20a5,
                               0x1683, 0x0a9b, 0x288a, 0x30fd, 0x00f5, 0x3066, 0x00f6, 0x289e, 0x209a, 0x209a, 0x307e, 0x00f5,
                               0x3020, 0x00f6, 0x0ff6, 0x289e, 0x0ff5, 0x289e, 0x3400, 0x390f, 0x3e30, 0x1af4, 0x28ad, 0x03c6,
                               0x1d03, 0x28ad, 0x00c7, 0x2104, 0x0847, 0x1686, 0x00b5, 0x0e35, 0x20b2, 0x0835, 0x00f2, 0x1c72,
                               0x1186, 0x1872, 0x1586, 0x1cf2, 0x1106, 0x18f2, 0x1506, 0x1d72, 0x1086, 0x1972, 0x1486, 0x1df2,
                               0x1006, 0x19f2, 0x1406, 0x1606, 0x0000, 0x1206, 0x3042, 0x00f5, 0x0bf5, 0x28c8, 0x3400, 0x3018,
                               0x00b3, 0x01c2, 0x01c3, 0x01c4, 0x01c5, 0x3042, 0x0084, 0x3004, 0x00b4, 0x3033, 0x0780, 0x1980,
                               0x39f0, 0x1b80, 0x390f, 0x0280, 0x0a84, 0x0bb4, 0x28d5, 0x0da2, 0x0da3, 0x0da4, 0x0dc5, 0x0dc4,
                               0x0dc3, 0x0dc2, 0x0bb3, 0x28d1, 0x0008, 0x209a, 0x1286, 0x1206, 0x3003, 0x20b2, 0x209a, 0x3003,
                               0x20b2, 0x3003, 0x20b2, 0x3002, 0x20b2, 0x300c, 0x2105, 0x3028, 0x2105, 0x3006, 0x2105, 0x3001,
                               0x2900, 0x3009, 0x00c6, 0x3002, 0x2102, 0x2893, 0x1286, 0x28ae, 0x30c0, 0x2102, 0x28c6, 0x3006,
                               0x009f, 0x1683, 0x3000, 0x009f, 0x3037, 0x0081, 0x30e7, 0x0085, 0x3040, 0x0086, 0x1283, 0x0008,
                               0x0181, 0x110b, 0x01be, 0x01bf, 0x01c0, 0x01c1, 0x2136, 0x1683, 0x30f7, 0x0085, 0x1283, 0x0000,
                               0x0000, 0x0000, 0x0000, 0x0000, 0x2144, 0x0801, 0x00c0, 0x1683, 0x1201, 0x0000, 0x1601, 0x1283,
                               0x03c1, 0x0801, 0x0640, 0x1903, 0x2927, 0x1683, 0x30e7, 0x0085, 0x1283, 0x0008, 0x30ff, 0x00f5,
                               0x307f, 0x00f6, 0x30f5, 0x00f7, 0x0ff7, 0x293c, 0x2144, 0x0ff6, 0x293c, 0x0ff5, 0x293c, 0x3400,
                               0x1d0b, 0x294c, 0x110b, 0x0abf, 0x1d03, 0x294b, 0x0abe, 0x0008, 0x0000, 0x0000, 0x294b, 0x20cb,
                               0x21be, 0x21c0, 0x21c2, 0x21c4, 0x21c6, 0x21c8, 0x21ca, 0x29cc, 0x0849, 0x20a5, 0x0842, 0x390f,
                               0x1903, 0x2964, 0x20a3, 0x21c2, 0x21c4, 0x21bc, 0x21c6, 0x2977, 0x0e43, 0x390f, 0x1903, 0x296e,
                               0x20a3, 0x21c4, 0x21bc, 0x21c6, 0x21c8, 0x2977, 0x0843, 0x390f, 0x1903, 0x2979, 0x20a3, 0x21bc,
                               0x21c6, 0x21c8, 0x21ca, 0x3011, 0x2888, 0x0e44, 0x390f, 0x1d03, 0x2986, 0x3020, 0x20a5, 0x0844,
                               0x390f, 0x1d03, 0x2987, 0x3020, 0x20a5, 0x2988, 0x21c6, 0x21c8, 0x21ca, 0x21bc, 0x21cc, 0x3015,
                               0x2888, 0x0849, 0x20a5, 0x0842, 0x390f, 0x1903, 0x2999, 0x20a3, 0x21c2, 0x21bc, 0x21c4, 0x21c6,
                               0x29a2, 0x0e43, 0x390f, 0x1903, 0x29a4, 0x20a3, 0x21bc, 0x21c4, 0x21c6, 0x21c8, 0x3019, 0x2888,
                               0x0843, 0x390f, 0x1903, 0x29ae, 0x20a3, 0x21c6, 0x21c8, 0x21bc, 0x21ca, 0x29ba, 0x0e44, 0x390f,
                               0x1d03, 0x29b5, 0x3020, 0x20a5, 0x29b6, 0x21c6, 0x21c8, 0x21bc, 0x21ca, 0x21cc, 0x301d, 0x2888,
                               0x302e, 0x28a5, 0x0e42, 0x28a3, 0x0842, 0x28a3, 0x0e43, 0x28a3, 0x0843, 0x28a3, 0x0e44, 0x28a3,
                               0x0844, 0x28a3, 0x0e45, 0x28a3, 0x0845, 0x28a3, 0x23ee, 0x29d3, 0x2376, 0x29d3, 0x2326, 0x04c8,
                               0x0830, 0x00a9, 0x0831, 0x00aa, 0x0832, 0x00ab, 0x0008, 0x0829, 0x00b0, 0x082a, 0x00b1, 0x082b,
                               0x00b2, 0x0823, 0x00a9, 0x0824, 0x00aa, 0x0825, 0x00ab, 0x0008, 0x0823, 0x06a9, 0x0629, 0x06a9,
                               0x00a3, 0x0824, 0x06aa, 0x062a, 0x06aa, 0x00a4, 0x0825, 0x06ab, 0x062b, 0x06ab, 0x00a5, 0x0008,
                               0x21d0, 0x2229, 0x21d2, 0x2a07, 0x21d2, 0x221b, 0x21d2, 0x2229, 0x21e8, 0x21d0, 0x222f, 0x21db,
                               0x21d2, 0x21e8, 0x21d0, 0x1fa4, 0x2a0b, 0x302d, 0x2a0c, 0x3020, 0x00c9, 0x13a4, 0x22ca, 0x04c8,
                               0x28cb, 0x2233, 0x2a14, 0x2231, 0x222f, 0x21d0, 0x21db, 0x21d2, 0x2223, 0x21e8, 0x29ce, 0x21db,
                               0x30b8, 0x00a5, 0x3060, 0x00a4, 0x30fa, 0x00a3, 0x0008, 0x21db, 0x01a5, 0x01a4, 0x01a3, 0x3001,
                               0x2a3f, 0x3070, 0x0084, 0x21db, 0x01a5, 0x01a4, 0x2a3b, 0x3036, 0x2a34, 0x303a, 0x2a34, 0x303e,
                               0x3e01, 0x0084, 0x21db, 0x01a5, 0x0800, 0x00a4, 0x0a84, 0x0800, 0x00a3, 0x0a84, 0x0800, 0x00a2,
                               0x2289, 0x04c8, 0x0008, 0x1683, 0x303e, 0x009b, 0x1283, 0x224e, 0x00f0, 0x224c, 0x00f1, 0x0008,
                               0x1683, 0x0a9b, 0x1683, 0x141c, 0x081a, 0x1283, 0x0008, 0x1683, 0x303e, 0x009b, 0x0870, 0x225d,
                               0x0871, 0x225c, 0x1283, 0x0008, 0x0a9b, 0x009a, 0x151c, 0x3055, 0x009d, 0x30aa, 0x009d, 0x149c,
                               0x189c, 0x2a64, 0x1283, 0x138c, 0x1683, 0x0008, 0x01af, 0x0824, 0x1d03, 0x2a74, 0x0823, 0x00a4,
                               0x1903, 0x2a84, 0x01a3, 0x15af, 0x082f, 0x02a5, 0x1d03, 0x1c03, 0x2be2, 0x1003, 0x1ba4, 0x2a81,
                               0x0da3, 0x0da4, 0x0ba5, 0x2a7a, 0x2be2, 0x1fa6, 0x13a4, 0x3400, 0x01a4, 0x01a3, 0x01a2, 0x01a5,
                               0x3400, 0x3096, 0x00a5, 0x01a6, 0x1fa4, 0x2a97, 0x09a2, 0x09a3, 0x09a4, 0x0aa2, 0x1903, 0x0aa3,
                               0x1903, 0x0aa4, 0x17a6, 0x01af, 0x0824, 0x1d03, 0x2aac, 0x0823, 0x00a4, 0x0822, 0x00a3, 0x01a2,
                               0x15af, 0x0824, 0x1d03, 0x2aac, 0x0823, 0x00a4, 0x01a3, 0x11af, 0x162f, 0x0824, 0x1903, 0x2a84,
                               0x082f, 0x02a5, 0x1d03, 0x1c03, 0x2be2, 0x1003, 0x1ba4, 0x2aba, 0x0da2, 0x0da3, 0x0da4, 0x0ba5,
                               0x2ab2, 0x2be2, 0x1b27, 0x1c23, 0x2a81, 0x1fa2, 0x2a81, 0x0aa3, 0x1903, 0x0aa4, 0x1d03, 0x2a81,
                               0x0ca4, 0x0ca3, 0x0aa5, 0x1903, 0x2b6c, 0x2a81, 0x01a2, 0x0825, 0x1903, 0x3400, 0x0824, 0x00a6,
                               0x17a4, 0x3096, 0x02a5, 0x1fa5, 0x2b1a, 0x09a5, 0x0aa5, 0x3008, 0x0225, 0x1c03, 0x2af6, 0x00a5,
                               0x0da2, 0x0823, 0x00a2, 0x0824, 0x00a3, 0x01a4, 0x3008, 0x0225, 0x1c03, 0x2af6, 0x00a5, 0x0da2,
                               0x0823, 0x00a2, 0x01a3, 0x3008, 0x0225, 0x1c03, 0x2af6, 0x00a5, 0x0da2, 0x01a2, 0x0825, 0x1d03,
                               0x1003, 0x2aff, 0x0825, 0x1903, 0x2aff, 0x1003, 0x0ca4, 0x0ca3, 0x0ca2, 0x0ba5, 0x2af9, 0x1b27,
                               0x1c22, 0x2b0b, 0x1c03, 0x2b0b, 0x0aa2, 0x1903, 0x0aa3, 0x1903, 0x0aa4, 0x1ba4, 0x2b1a, 0x1fa6,
                               0x3400, 0x09a4, 0x09a3, 0x09a2, 0x0aa2, 0x1903, 0x0aa3, 0x1903, 0x0aa4, 0x3400, 0x01a4, 0x01a3,
                               0x01a2, 0x3400, 0x1427, 0x1fa7, 0x34ff, 0x01a4, 0x1fa6, 0x30ff, 0x00a4, 0x00a3, 0x00a2, 0x0da6,
                               0x0ca4, 0x34ff, 0x0825, 0x1d03, 0x082b, 0x1903, 0x2a84, 0x0824, 0x062a, 0x00a6, 0x082b, 0x07a5,
                               0x307e, 0x1c03, 0x2b37, 0x02a5, 0x1803, 0x2b6c, 0x2b3a, 0x02a5, 0x1c03, 0x2be2, 0x0824, 0x00a2,
                               0x0823, 0x00a1, 0x17a2, 0x17aa, 0x1003, 0x01a4, 0x01a3, 0x3010, 0x00af, 0x1c21, 0x2b4d, 0x0829,
                               0x07a3, 0x082a, 0x1803, 0x0f2a, 0x07a4, 0x0ca4, 0x0ca3, 0x0ca2, 0x0ca1, 0x1003, 0x0baf, 0x2b45,
                               0x1ba4, 0x2b5a, 0x0da2, 0x0da3, 0x0da4, 0x03a5, 0x1b27, 0x1c23, 0x2b69, 0x1fa2, 0x2b69, 0x0aa3,
                               0x1903, 0x0aa4, 0x1d03, 0x2b69, 0x0ca4, 0x0ca3, 0x0aa5, 0x1903, 0x2b6c, 0x1fa6, 0x13a4, 0x3400,
                               0x14a7, 0x1fa7, 0x34ff, 0x30ff, 0x00a5, 0x00a4, 0x00a3, 0x0da6, 0x0ca4, 0x34ff, 0x082b, 0x1903,
                               0x2bec, 0x0825, 0x1903, 0x2a84, 0x0824, 0x062a, 0x00a6, 0x17a4, 0x17aa, 0x01af, 0x0824, 0x00a2,
                               0x0823, 0x00a1, 0x0829, 0x02a1, 0x082a, 0x1c03, 0x0f2a, 0x02a2, 0x01a2, 0x01a1, 0x1c03, 0x2b96,
                               0x1003, 0x0ca4, 0x0ca3, 0x0ca2, 0x3001, 0x00af, 0x082b, 0x02a5, 0x1c03, 0x2ba0, 0x307e, 0x072f,
                               0x07a5, 0x1803, 0x2b6c, 0x2ba5, 0x307e, 0x072f, 0x07a5, 0x1c03, 0x2be2, 0x3010, 0x00ae, 0x0da1,
                               0x0da2, 0x0da3, 0x0da4, 0x0daf, 0x0829, 0x02a3, 0x082a, 0x1c03, 0x0f2a, 0x02a4, 0x0d2a, 0x04af,
                               0x1c2f, 0x2bb8, 0x1421, 0x2bbf, 0x0829, 0x07a3, 0x082a, 0x1803, 0x0a2a, 0x07a4, 0x1021, 0x0bae,
                               0x2ba7, 0x1b27, 0x1c21, 0x2bdb, 0x1003, 0x0da3, 0x0da4, 0x0daf, 0x0829, 0x02a3, 0x082a, 0x1c03,
                               0x0f2a, 0x02a4, 0x0d2a, 0x042f, 0x3901, 0x07a1, 0x1803, 0x0aa2, 0x1d03, 0x2bdb, 0x0ca2, 0x0ca1,
                               0x0aa5, 0x1903, 0x2b6c, 0x1fa6, 0x13a2, 0x0822, 0x00a4, 0x0821, 0x00a3, 0x3400, 0x1527, 0x1fa7,
                               0x34ff, 0x3001, 0x00a5, 0x01a4, 0x01a3, 0x0da6, 0x0ca4, 0x34ff, 0x15a7, 0x34ff, 0x3080, 0x06aa,
                               0x0824, 0x062a, 0x00af, 0x01a2, 0x01a8, 0x0825, 0x022b, 0x1c03, 0x2c0b, 0x082b, 0x00a0, 0x0825,
                               0x00ab, 0x0820, 0x00a5, 0x082a, 0x00a0, 0x0824, 0x00aa, 0x0820, 0x00a4, 0x0829, 0x00a0, 0x0823,
                               0x00a9, 0x0820, 0x00a3, 0x082b, 0x1903, 0x3400, 0x0824, 0x00a6, 0x17a4, 0x17aa, 0x082b, 0x0225,
                               0x00ab, 0x1903, 0x2c31, 0x3008, 0x022b, 0x1c03, 0x2c28, 0x00ab, 0x0829, 0x00a8, 0x082a, 0x00a9,
                               0x01aa, 0x3008, 0x022b, 0x1c03, 0x2c28, 0x0826, 0x00a4, 0x3400, 0x082b, 0x1903, 0x2c31, 0x1003,
                               0x0caa, 0x0ca9, 0x0ca8, 0x0bab, 0x2c2b, 0x1faf, 0x2c3b, 0x09a8, 0x09a9, 0x09aa, 0x0aa8, 0x1903,
                               0x0aa9, 0x1903, 0x0aaa, 0x0828, 0x07a2, 0x0829, 0x1803, 0x0f29, 0x07a3, 0x082a, 0x1803, 0x0f2a,
                               0x07a4, 0x1baf, 0x2c4f, 0x1c03, 0x2aba, 0x0ca4, 0x0ca3, 0x0ca2, 0x0fa5, 0x2aba, 0x2b6c, 0x1803,
                               0x2a97, 0x09a2, 0x09a3, 0x09a4, 0x0aa2, 0x1903, 0x0aa3, 0x1903, 0x0aa4, 0x3080, 0x06a6, 0x2a6a };


uint16_t config_word = 0x3f62;

uint8_t data_segment[] = { 0x20, 0x20, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x20, 0x52, 0x61, 0x6e, 0x67,
                           0x65, 0x20, 0x20, 0x20, 0x00, 0x20, 0x6e, 0x46, 0x00, 0x20, 0x70, 0x46,
                           0x00, 0x20, 0x6d, 0x48, 0x00, 0x20, 0x75, 0x48, 0x00, 0x20, 0x43, 0x20,
                           0x3d, 0x20, 0x00, 0x20, 0x4c, 0x20, 0x3d, 0x20, 0x00, 0x20, 0x20, 0x43,
                           0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x20,
                           0x20, 0x00, 0x27, 0x10 };

void enterHVP() {

    digitalWrite(PGM_OUT, LOW);
    delay(1);
    digitalWrite(VPP_OUT, VPP_ON);
    delay(1);
    digitalWrite(VDD_OUT, HIGH);
    delay(1);
}

void exitHVP() {

    digitalWrite(PGM_OUT, LOW);
    digitalWrite(VPP_OUT, VPP_OFF);
    digitalWrite(VDD_OUT, LOW);
    digitalWrite(DAT_OUT, LOW);
    digitalWrite(CLK_OUT, LOW);
}


void sendCommand(uint8_t cmd) {

    for (int i = 0; i < 6; i++) {
        digitalWrite(CLK_OUT, HIGH);
        digitalWrite(DAT_OUT, (cmd >> i) & 0x1);
        delay(1);
        digitalWrite(CLK_OUT, LOW);
        delay(1);
    }
}

uint16_t receiveData() {

    uint16_t data = 0;
    for (int i = 0; i < 16; i++) {

        digitalWrite(CLK_OUT, HIGH);
        delay(1);
        int b = digitalRead(DAT_IN);
        data |= b << i;
        digitalWrite(CLK_OUT, LOW);
        delay(1);
    }

    return (data >> 1) & 0x3fff;
}

void sendData(uint16_t data) {

    data <<= 1;

    for (int i = 0; i < 16; i++) {
        digitalWrite(CLK_OUT, HIGH);
        digitalWrite(DAT_OUT, (data >> i) & 0x1);
        delay(1);
        digitalWrite(CLK_OUT, LOW);
        delay(1);
    }
}

void cmdIncrementPC() {
    sendCommand(CMD_INCREMENT_ADDRESS);
    delay(1);
}

void cmdBeginProgramming() {
    sendCommand(CMD_BEGIN_PROGRAM);
}

uint16_t cmdLoadConfiguration() {
    sendCommand(CMD_LOAD_CONFIG);
    delay(1);
    sendData(0);
}

uint16_t cmdReadProgramMemory() {
    sendCommand(CMD_READ_PROGRAM_MEMORY);
    delay(1);
    return receiveData();
}

uint8_t cmdReadDataMemory() {
    sendCommand(CMD_READ_DATA_MEMORY);
    delay(1);
    uint16_t data = receiveData();
    return data & 0xff;
}

void cmdLoadProgramMemory(uint16_t word) {
    sendCommand(CMD_LOAD_PROGRAM_MEMORY);
    delay(1);
    sendData(word);
    delay(1); // really necessary?
}

void cmdLoadDataMemory(uint8_t data) {
    sendCommand(CMD_LOAD_DATA_MEMORY);
    delay(1);
    sendData(data);
    delay(1); // really necessary?
}

void cmdBulkEraseProgramMemory() {
    sendCommand(CMD_BULK_ERASE_PROGRAM);
}

void cmdBulkEraseDataMemory() {
    sendCommand(CMD_BULK_ERASE_DATA);
}

void printWordBin(uint16_t word) {
    char str[] = "00 0000 0000 0000";
    if(word & (1 << 13)) str[0] = '1';
    if(word & (1 << 12)) str[1] = '1';

    if(word & (1 << 11)) str[3] = '1';
    if(word & (1 << 10)) str[4] = '1';
    if(word & (1 <<  9)) str[5] = '1';
    if(word & (1 <<  8)) str[6] = '1';

    if(word & (1 << 7)) str[8] = '1';
    if(word & (1 << 6)) str[9] = '1';
    if(word & (1 << 5)) str[10] = '1';
    if(word & (1 << 4)) str[11] = '1';

    if(word & (1 << 3)) str[13] = '1';
    if(word & (1 << 2)) str[14] = '1';
    if(word & (1 << 1)) str[15] = '1';
    if(word & (1 << 0)) str[16] = '1';
    Serial.print(str);
}

void printWordHex(uint16_t word) {
    const char hexmap[] = "0123456789abcdef";

    char str[] = "0000";
    str[3] = hexmap[word & 0xF];
    str[2] = hexmap[(word >> 4) & 0xF];
    str[1] = hexmap[(word >> 8) & 0xF];
    str[0] = hexmap[(word >> 12) & 0x3];

    Serial.print(str);
}

void printByteHex(uint16_t word) {
    const char hexmap[] = "0123456789abcdef";

    char str[] = "00";
    str[1] = hexmap[word & 0xF];
    str[0] = hexmap[(word >> 4) & 0xF];

    Serial.print(str);
}

uint16_t readDeviceID() {
    enterHVP();
    cmdLoadConfiguration();
    for(int i=0; i<6; i++) cmdIncrementPC();
    uint16_t devid = cmdReadProgramMemory();
    exitHVP();
    return devid;
}

uint16_t readConfigurationWord() {
    enterHVP();
    cmdLoadConfiguration();
    for(int i=0; i<7; i++) cmdIncrementPC();
    uint16_t conf = cmdReadProgramMemory();
    exitHVP();
    return conf;
}


void doProgram() {

    Serial.println("Bulk erasing program memory...");
    enterHVP();
    cmdLoadProgramMemory(0x3fff);
    cmdBulkEraseProgramMemory();
    delay(T_ERA_MS);
    exitHVP();

    Serial.println("Bulk erasing data memory...");
    enterHVP();
    cmdBulkEraseDataMemory();
    delay(T_ERA_MS);
    exitHVP();

    Serial.println("Writing configuration bits...");
    enterHVP();
    cmdLoadConfiguration();
    for(int i=0; i<7; i++) cmdIncrementPC();
    cmdLoadProgramMemory(config_word);
    cmdBeginProgramming();
    delay(T_PROG_MS);
    exitHVP();

    Serial.println("Writing program segment...");
    enterHVP();
    for(int i=0; i<sizeof(program_segment)/sizeof(program_segment[0]); i++) {
        printWordHex(pgm_read_word_near(program_segment +i));
        if(i%8 == 7) {
            Serial.println();
        } else {
            Serial.print(" ");
        }
        cmdLoadProgramMemory(pgm_read_word_near(program_segment +i));
        cmdBeginProgramming();
        delay(T_PROG_MS);
        cmdIncrementPC();
    }
    exitHVP();

    Serial.println("Writing data segment...");
    enterHVP();
    // only 8 LSB of address are used.
    for(int i=0; i<sizeof(data_segment)/sizeof(data_segment[0]); i++) {
        printByteHex(data_segment[i]);
        if(i%8 == 7) {
            Serial.println();
        } else {
            Serial.print(" ");
        }
        cmdLoadDataMemory(data_segment[i]);
        cmdBeginProgramming();
        delay(T_DPROG_MS);
        cmdIncrementPC();
    }
    exitHVP();

}


void readStuff() {

    Serial.println("Verification.");
    // read configuration
    uint16_t conf = readConfigurationWord();
    Serial.print("Configuration bits: ");
    printWordBin(conf);
    Serial.println();

    uint16_t devid = readDeviceID();
    Serial.print("Device ID:          ");
    printWordBin(devid);
    Serial.println();

    // read program
    Serial.println("Program:");
    enterHVP();
    const int nbytes = 256;
    for(int i=0; i<nbytes; i++) {
        uint16_t d = cmdReadProgramMemory();
        cmdIncrementPC();
        printWordHex(d);
        if(i%8 == 7) {
            Serial.println();
        } else {
            Serial.print(" ");
        }
    }
    exitHVP();

    // read data
    Serial.println("Data:");
    enterHVP();
    for(int i=0; i<128; i++) {
        uint8_t d = cmdReadDataMemory();
        cmdIncrementPC();
        printByteHex(d);
        if(i%8 == 7) {
            Serial.println();
        } else {
            Serial.print(" ");
        }
    }
    exitHVP();

}

void setup() {
    // put your setup code here, to run once:
    Serial.begin(115200);
    digitalWrite(CLK_OUT, LOW);
    pinMode(CLK_OUT, OUTPUT);
    digitalWrite(DAT_OUT, LOW);
    pinMode(DAT_OUT, OUTPUT);
    pinMode(DAT_IN, INPUT);
    digitalWrite(VDD_OUT, LOW);
    pinMode(VDD_OUT, OUTPUT);
    digitalWrite(VPP_OUT, VPP_OFF);
    pinMode(VPP_OUT, OUTPUT);
    digitalWrite(PGM_OUT, LOW);
    pinMode(PGM_OUT, OUTPUT);
    digitalWrite(STATUS_LED, LOW);
    pinMode(STATUS_LED, OUTPUT);


    doProgram();
    readStuff();

    Serial.println("\nExit");
}

void loop() {}
